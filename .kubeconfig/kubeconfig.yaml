apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: CA here /:3
    server: 162.38.112.134:6443  # Or https://162.38.112.134:6443 ???
  name: cash-chan
contexts:
- context:
    cluster: cash-chan
    user: cash-chan-admin
  name: cash-chan
current-context: cash-chan
kind: Config
preferences: {}
users:
- name: cash-chan-admin
  user:
    token: service account personnal access token here

# You can find the kubeconfig file for k3s typically at /etc/rancher/k3s/k3s.yaml
# Or not. May have changed. Check the docs.

# Certificate Authority Data : have admin access to cluster, it should be in cluster config dir : For k3s, it’s typically located at /etc/rancher/k3s/k3s.yaml
#To get the base64-encoded CA data:
#cat /etc/rancher/k3s/k3s.yaml | grep "certificate-authority-data" | awk '{print $2}'


#If you don’t have a token, you can create a Service Account and get a token for it:

#Create a Service Account:
#kubectl create serviceaccount my-user -n my-namespace

#Bind the Service Account to a Role (for example, cluster-admin):
#kubectl create clusterrolebinding my-user-binding --clusterrole=cluster-admin --serviceaccount=my-namespace:my-user

#Get the Token:
#kubectl -n my-namespace get secret $(kubectl -n my-namespace get sa/my-user -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode


#Example Workflow

#     Export the KUBECONFIG environment variable:
#export KUBECONFIG=/path/to/your/kubeconfig/file

#     Check the connection:

#kubectl get pods -n my-namespace

#If everything is set up correctly, you should be able to interact with your Kubernetes cluster in the specified namespace using kubectl.